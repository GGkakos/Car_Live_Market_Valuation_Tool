##### FILE: ./temp_urls.json
==================================================
["https://www.cargiant.co.uk/car/Volkswagen/Golf/KR68JFY", "https://www.cargiant.co.uk/car/Tesla/Model-X/LG67KKU", "https://www.cargiant.co.uk/car/Vauxhall/Astra/WP20CKK", "https://www.cargiant.co.uk/car/KIA/Stinger/LF19MVW", "https://www.cargiant.co.uk/car/Mini/Countryman/OW19YCZ", "https://www.cargiant.co.uk/car/Volkswagen/Golf/PN70KGZ", "https://www.cargiant.co.uk/car/Volvo/XC40/FM68EOS", "https://www.cargiant.co.uk/car/KIA/Rio/FV18DNO", "https://www.cargiant.co.uk/car/Volkswagen/Touareg/BL68AVG", "https://www.cargiant.co.uk/car/Seat/Arona/RV69XPB", "https://www.cargiant.co.uk/car/Volvo/XC40/LB19EMV", "https://www.cargiant.co.uk/car/Land-Rover/Range-Rover-Evoque/AK20EYR", "https://www.cargiant.co.uk/car/BMW/X2/DL67YMH", "https://www.cargiant.co.uk/car/Mercedes/S-Class/PJ69ZZR", "https://www.cargiant.co.uk/car/Volkswagen/Touareg/PL18PHA", "https://www.cargiant.co.uk/car/Mercedes/E-Class/PF19TBZ", "https://www.cargiant.co.uk/car/Mercedes/A-Class/YF20LKZ", "https://www.cargiant.co.uk/car/Ford/Edge/ET19VJJ", "https://www.cargiant.co.uk/car/Seat/Leon/BP70EYU", "https://www.cargiant.co.uk/car/Citroen/C1/LA21WYF", "https://www.cargiant.co.uk/car/Renault/Captur/EY20OHN", "https://www.cargiant.co.uk/car/Vauxhall/Crossland-X/NRZ9125", "https://www.cargiant.co.uk/car/KIA/Sportage/YF19FSB", "https://www.cargiant.co.uk/car/Seat/Arona/AJ21EWK", "https://www.cargiant.co.uk/car/Toyota/Corolla/WK20VWW", "https://www.cargiant.co.uk/car/Seat/Arona/MH21RKF", "https://www.cargiant.co.uk/car/KIA/Niro/LM72ATF"]


##### FILE: ./scrapy.cfg
==================================================
# Automatically created by: scrapy startproject
#
# For more information about the [deploy] section see:
# https://scrapyd.readthedocs.io/en/latest/deploy.html

[settings]
default = cargiant_scraper_3.settings

[deploy]
#url = http://localhost:6800/
project = cargiant_scraper_3



##### FILE: ./urls.json
==================================================
[
  "https://www.cargiant.co.uk/car/Volkswagen/Golf/KR68JFY",
  "https://www.cargiant.co.uk/car/Tesla/Model-X/LG67KKU",
  "https://www.cargiant.co.uk/car/Vauxhall/Astra/WP20CKK",
  "https://www.cargiant.co.uk/car/KIA/Stinger/LF19MVW",
  "https://www.cargiant.co.uk/car/Mini/Countryman/OW19YCZ",
  "https://www.cargiant.co.uk/car/Volkswagen/Golf/PN70KGZ",
  "https://www.cargiant.co.uk/car/Volvo/XC40/FM68EOS",
  "https://www.cargiant.co.uk/car/KIA/Rio/FV18DNO",
  "https://www.cargiant.co.uk/car/Volkswagen/Touareg/BL68AVG",
  "https://www.cargiant.co.uk/car/Seat/Arona/RV69XPB",
  "https://www.cargiant.co.uk/car/Volvo/XC40/LB19EMV",
  "https://www.cargiant.co.uk/car/Land-Rover/Range-Rover-Evoque/AK20EYR",
  "https://www.cargiant.co.uk/car/BMW/X2/DL67YMH",
  "https://www.cargiant.co.uk/car/Mercedes/S-Class/PJ69ZZR",
  "https://www.cargiant.co.uk/car/Volkswagen/Touareg/PL18PHA",
  "https://www.cargiant.co.uk/car/Mercedes/E-Class/PF19TBZ",
  "https://www.cargiant.co.uk/car/Mercedes/A-Class/YF20LKZ",
  "https://www.cargiant.co.uk/car/Ford/Edge/ET19VJJ",
  "https://www.cargiant.co.uk/car/Seat/Leon/BP70EYU",
  "https://www.cargiant.co.uk/car/Citroen/C1/LA21WYF",
  "https://www.cargiant.co.uk/car/Renault/Captur/EY20OHN",
  "https://www.cargiant.co.uk/car/Vauxhall/Crossland-X/NRZ9125",
  "https://www.cargiant.co.uk/car/KIA/Sportage/YF19FSB",
  "https://www.cargiant.co.uk/car/Seat/Arona/AJ21EWK",
  "https://www.cargiant.co.uk/car/Toyota/Corolla/WK20VWW",
  "https://www.cargiant.co.uk/car/Seat/Arona/MH21RKF",
  "https://www.cargiant.co.uk/car/KIA/Niro/LM72ATF"
]


##### FILE: ./cargiant_scraper_3/spiders/catalogue.py
==================================================
import scrapy
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from scrapy.http import HtmlResponse
import logging
import time

class CargiantSpider(scrapy.Spider):
    name = "catalogue"
    start_urls = ['https://www.cargiant.co.uk/search/all/all']

    def __init__(self, *args, **kwargs):
        super(CargiantSpider, self).__init__(*args, **kwargs)
        chrome_options = Options()
        chrome_options.add_argument('--headless')  # Run in headless mode
        chrome_options.add_argument('--disable-gpu')
        chrome_options.add_argument('--no-sandbox')
        self.driver = webdriver.Chrome(options=chrome_options)
    
    def parse(self, response):
        self.driver.get(response.url)

        for page_num in range(1):  # change number of pages
            self.logger.info(f"Processing page {page_num + 1}")
            
            # Wait for the listings to load
            try:
                WebDriverWait(self.driver, 10).until(
                    EC.presence_of_element_located((By.CSS_SELECTOR, 'div[data-vehicle]'))
                )
            except Exception as e:
                self.logger.error(f"Error loading listings: {e}")
                break

            # Grab the current HTML source
            body = self.driver.page_source
            response_obj = HtmlResponse(
                url=self.driver.current_url,
                body=body,
                encoding='utf-8',
            )

            # Parse car listing links
            listings = response_obj.css('a.car-listing-item__details')
            if not listings:
                self.logger.warning("No listings found!")

            for listing in listings:
                car_url = listing.attrib.get('href')
                if car_url:
                    # Construct the absolute URL
                    full_url = f"https://www.cargiant.co.uk{car_url}"
                    yield {
                        'url': full_url,
                    }
                else:
                    self.logger.warning("No URL found in a listing.")
            
            # Handle pagination by clicking the "Next" button
            try:
                next_button = WebDriverWait(self.driver, 10).until(
                    EC.presence_of_element_located((By.CSS_SELECTOR, 'a.paging__item--next'))
                )
                self.driver.execute_script("arguments[0].click();", next_button)
                time.sleep(2)  # Allow time for the next page to load
            except Exception as e:
                self.logger.error(f"Error clicking next button: {e}")
                break

    def closed(self, reason):
        self.driver.quit()



##### FILE: ./cargiant_scraper_3/spiders/master.py
==================================================
import scrapy
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from scrapy.http import HtmlResponse
import json
import os
import time
import subprocess
import sys

class CargiantSpider(scrapy.Spider):
    name = "master"
    start_urls = ['https://www.cargiant.co.uk/search/all/all']

    def __init__(self, *args, **kwargs):
        super(CargiantSpider, self).__init__(*args, **kwargs)
        chrome_options = Options()
        chrome_options.add_argument('--headless')  # Run in headless mode
        chrome_options.add_argument('--disable-gpu')
        chrome_options.add_argument('--no-sandbox')
        self.driver = webdriver.Chrome(options=chrome_options)
        self.urls_file = "urls.json"
        self.results_file = "results.json"

        # Delete old files if they exist
        if os.path.exists(self.urls_file):
            os.remove(self.urls_file)
        if os.path.exists(self.results_file):
            os.remove(self.results_file)

    def parse(self, response):
        self.driver.get(response.url)

        all_urls = []  # Save all the car listing URLs

        for page_num in range(1):  # Adjust number of pages as needed
            self.logger.info(f"Processing page {page_num + 1}")

            # Wait for the listings to load
            try:
                WebDriverWait(self.driver, 10).until(
                    EC.presence_of_element_located((By.CSS_SELECTOR, 'div[data-vehicle]'))
                )
            except Exception as e:
                self.logger.error(f"Error loading listings: {e}")
                break

            # Grab the current HTML source
            body = self.driver.page_source
            response_obj = HtmlResponse(
                url=self.driver.current_url,
                body=body,
                encoding='utf-8',
            )

            # Parse car listing links
            listings = response_obj.css('a.car-listing-item__details')
            if not listings:
                self.logger.warning("No listings found!")

            for listing in listings:
                car_url = listing.attrib.get('href')
                if car_url:
                    # Construct the absolute URL
                    full_url = f"https://www.cargiant.co.uk{car_url}"
                    all_urls.append(full_url)
                else:
                    self.logger.warning("No URL found in a listing.")

            # Handle pagination by clicking the "Next" button
            try:
                next_button = WebDriverWait(self.driver, 10).until(
                    EC.presence_of_element_located((By.CSS_SELECTOR, 'a.paging__item--next'))
                )
                self.driver.execute_script("arguments[0].click();", next_button)
                time.sleep(2)  # Allow time for the next page to load
            except Exception as e:
                self.logger.error(f"Error clicking next button: {e}")
                break

        # Save all URLS to urls.json
        self.logger.info(f"Found {len(all_urls)} URLs in total.")
        self.save_urls_to_json(all_urls)

        # Call the individual listing spider for each URL
        self.crawl_ind_listing(all_urls)

    def save_urls_to_json(self, urls):
        """Save all collected URLs to a JSON file."""
        try:
            with open(self.urls_file, 'w') as f:
                json.dump(urls, f, indent=2)
            self.logger.info(f"Saved {len(urls)} URLs to {self.urls_file}.")
        except Exception as e:
            self.logger.error(f"Error saving URLs to file: {e}")

    def crawl_ind_listing(self, urls):
        """Run the 'ind_listing' spider once with all URLs."""
        # Write all URLs to a temporary file
        temp_urls_file = 'temp_urls.json'
        with open(temp_urls_file, 'w') as f:
            json.dump(urls, f)

        try:
            # Get the project root directory (where scrapy.cfg is located)
            project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
            self.logger.info(f"Using project root directory: {project_root}")

            # Update PYTHONPATH in the environment variables
            env = os.environ.copy()
            env['PYTHONPATH'] = project_root + os.pathsep + env.get('PYTHONPATH', '')

            # Use sys.executable to ensure the subprocess uses the same Python environment
            subprocess.run(
                [
                    sys.executable, "-m", "scrapy", "crawl", "ind_listing",
                    "-a", f"urls_file={temp_urls_file}",
                    "-o", self.results_file,
                    "-t", "json"
                ],
                check=True,
                cwd=project_root,  # Set the working directory to project root
                env=env  # Pass the updated environment variables
            )
        except subprocess.CalledProcessError as e:
            self.logger.error(f"Error while running ind_listing spider: {e}")

    def closed(self, reason):
        self.driver.quit()



##### FILE: ./cargiant_scraper_3/spiders/ind_listing.py
==================================================
import scrapy
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
import json
import logging
import time

class CargiantSpider(scrapy.Spider):
    name = 'ind_listing'

    def __init__(self, *args, **kwargs):
        super(CargiantSpider, self).__init__(*args, **kwargs)
        chrome_options = Options()
        chrome_options.add_argument('--headless')  # Run in headless mode
        chrome_options.add_argument('--disable-gpu')
        chrome_options.add_argument('--no-sandbox')
        self.driver = webdriver.Chrome(options=chrome_options)

        # Read URLs from the passed file
        urls_file = kwargs.get('urls_file')
        if urls_file:
            self.logger.info(f"Reading URLs from file: {urls_file}")
            with open(urls_file, 'r') as f:
                self.start_urls = json.load(f)
            self.logger.info(f"Loaded {len(self.start_urls)} URLs.")
        else:
            self.logger.error("No URLs file provided!")
            self.start_urls = []

    def start_requests(self):
        # Log that start_requests is invoked
        self.logger.info("Starting to process URLs...")
        for url in self.start_urls:
            self.logger.info(f"Processing URL: {url}")
            yield scrapy.Request(url, self.parse)

    def parse(self, response):
        self.driver.get(response.url)
        time.sleep(1)  # Wait for the page to load

        # Initialize dictionary for output
        output = {"url": response.url}

        # Extract title
        try:
            title_element = self.driver.find_element(By.CSS_SELECTOR, 'h1.title__main.set-h3')
            title = title_element.text.strip()
            title_parts = title.split(None, 1)  # Split into brand and model
            output["brand"] = title_parts[0]
            output["model"] = title_parts[1] if len(title_parts) > 1 else None
        except Exception as e:
            self.logger.error(f"Error extracting title: {e}")
            output["brand"] = None
            output["model"] = None

        # Log the parsed output
        self.logger.info(f"Scraped data: {output}")

        yield output

    def closed(self, reason):
        self.driver.quit()



##### FILE: ./cargiant_scraper_3/spiders/__init__.py
==================================================
# This package will contain the spiders of your Scrapy project
#
# Please refer to the documentation for information on how to create and manage
# your spiders.



##### FILE: ./cargiant_scraper_3/middlewares.py
==================================================
import logging
from selenium.webdriver.remote.remote_connection import LOGGER as selenium_logger
from scrapy.http import HtmlResponse
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from scrapy import signals

# Suppress unnecessary Selenium logs
selenium_logger.setLevel(logging.WARNING)

class SeleniumMiddleware:
    def __init__(self):
        chrome_options = Options()
        chrome_options.add_argument("--headless")  # Run in headless mode
        chrome_options.add_argument("--disable-gpu")
        chrome_options.add_argument("--no-sandbox")  # Required for some environments
        chrome_options.add_argument("--disable-dev-shm-usage")  # Overcome limited resource problems
        service = Service(ChromeDriverManager().install())
        self.driver = webdriver.Chrome(service=service, options=chrome_options)

    @classmethod
    def from_crawler(cls, crawler):
        middleware = cls()
        crawler.signals.connect(middleware.spider_closed, signal=signals.spider_closed)
        return middleware

    def process_request(self, request, spider):
        logging.info(f"Processing URL: {request.url}")
        self.driver.get(request.url)

        try:
            # Wait until the target element is present
            WebDriverWait(self.driver, 10).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, "div[data-vehicle]"))
            )
        except Exception as e:
            logging.error(f"Error loading page {request.url}: {e}")
            return HtmlResponse(
                url=self.driver.current_url,
                status=500,
                request=request,
                body=f"Error loading page: {e}".encode('utf-8')
            )

        body = self.driver.page_source
        return HtmlResponse(
            url=self.driver.current_url,
            body=body,
            encoding='utf-8',
            request=request
        )

    def spider_closed(self, spider):
        logging.info("Closing Selenium WebDriver.")
        self.driver.quit()



##### FILE: ./cargiant_scraper_3/settings.py
==================================================
# Scrapy settings for cargiant_scraper_3 project

BOT_NAME = "cargiant_scraper_3"

SPIDER_MODULES = ["cargiant_scraper_3.spiders"]
NEWSPIDER_MODULE = "cargiant_scraper_3.spiders"

# Obey robots.txt rules
ROBOTSTXT_OBEY = False

# Enable or disable downloader middlewares
DOWNLOADER_MIDDLEWARES = {
    # 'cargiant_scraper_3.middlewares.SeleniumMiddleware': 543,
    'scrapy.downloadermiddlewares.httpcompression.HttpCompressionMiddleware': 810,
}

# Enable and configure HTTP caching (disabled by default)
HTTPCACHE_STORAGE = 'scrapy.extensions.httpcache.FilesystemCacheStorage'

# Set settings whose default value is deprecated to a future-proof value
REQUEST_FINGERPRINTER_IMPLEMENTATION = "2.7"
TWISTED_REACTOR = "twisted.internet.asyncioreactor.AsyncioSelectorReactor"
FEED_EXPORT_ENCODING = "utf-8"

LOG_LEVEL = 'INFO'  # Set this to 'ERROR' if you only want to see errors.



##### FILE: ./cargiant_scraper_3/pipelines.py
==================================================
# Define your item pipelines here
#
# Don't forget to add your pipeline to the ITEM_PIPELINES setting
# See: https://docs.scrapy.org/en/latest/topics/item-pipeline.html


# useful for handling different item types with a single interface
from itemadapter import ItemAdapter


class CargiantScraperPipeline:
    def process_item(self, item, spider):
        return item



##### FILE: ./cargiant_scraper_3/items.py
==================================================
# Define here the models for your scraped items
#
# See documentation in:
# https://docs.scrapy.org/en/latest/topics/items.html

import scrapy


class CargiantScraperItem(scrapy.Item):
    # define the fields for your item here like:
    # name = scrapy.Field()
    pass



##### FILE: ./cargiant_scraper_3/__init__.py
==================================================



##### FILE: ./cargiant_scraper_3/runfile.py
==================================================
import os
from scrapy import cmdline

# Ensure we are in the correct directory before running the Scrapy command
# target_dir = './Marij/cargiant_scraper_3'
# current_dir = os.getcwd()

# if current_dir != os.path.abspath(target_dir):
#     os.chdir(target_dir)

# Execute the Scrapy command
cmdline.execute("scrapy crawl master -O cargiant_data.json".split())



##### FILE: ./cargiant_data.json
==================================================
[

]


.
├── cargiant_data.json
├── cargiant_scraper_3
│   ├── __init__.py
│   ├── items.py
│   ├── middlewares.py
│   ├── pipelines.py
│   ├── __pycache__
│   │   ├── __init__.cpython-310.pyc
│   │   ├── __init__.cpython-313.pyc
│   │   ├── middlewares.cpython-310.pyc
│   │   ├── middlewares.cpython-313.pyc
│   │   ├── settings.cpython-310.pyc
│   │   └── settings.cpython-313.pyc
│   ├── runfile.py
│   ├── settings.py
│   └── spiders
│       ├── catalogue.py
│       ├── ind_listing.py
│       ├── __init__.py
│       ├── master.py
│       └── __pycache__
│           ├── cargiant_spider.cpython-310.pyc
│           ├── cargiant_spider.cpython-313.pyc
│           ├── cargiant_spider_new.cpython-310.pyc
│           ├── cargiant_spider_new.cpython-313.pyc
│           ├── catalogue.cpython-310.pyc
│           ├── ind_listing.cpython-310.pyc
│           ├── __init__.cpython-310.pyc
│           ├── __init__.cpython-313.pyc
│           └── master.cpython-310.pyc
├── combined_code.txt
├── scrapy.cfg
├── temp_urls.json
└── urls.json

4 directories, 30 files
##### FILE: ./temp_urls.json
==================================================
["https://www.cargiant.co.uk/car/Volkswagen/Golf/KR68JFY", "https://www.cargiant.co.uk/car/Tesla/Model-X/LG67KKU", "https://www.cargiant.co.uk/car/Vauxhall/Astra/WP20CKK", "https://www.cargiant.co.uk/car/KIA/Stinger/LF19MVW", "https://www.cargiant.co.uk/car/Mini/Countryman/OW19YCZ", "https://www.cargiant.co.uk/car/Volkswagen/Golf/PN70KGZ", "https://www.cargiant.co.uk/car/Volvo/XC40/FM68EOS", "https://www.cargiant.co.uk/car/KIA/Rio/FV18DNO", "https://www.cargiant.co.uk/car/Volkswagen/Touareg/BL68AVG", "https://www.cargiant.co.uk/car/Seat/Arona/RV69XPB", "https://www.cargiant.co.uk/car/Volvo/XC40/LB19EMV", "https://www.cargiant.co.uk/car/Land-Rover/Range-Rover-Evoque/AK20EYR", "https://www.cargiant.co.uk/car/BMW/X2/DL67YMH", "https://www.cargiant.co.uk/car/Mercedes/S-Class/PJ69ZZR", "https://www.cargiant.co.uk/car/Volkswagen/Touareg/PL18PHA", "https://www.cargiant.co.uk/car/Mercedes/E-Class/PF19TBZ", "https://www.cargiant.co.uk/car/Mercedes/A-Class/YF20LKZ", "https://www.cargiant.co.uk/car/Ford/Edge/ET19VJJ", "https://www.cargiant.co.uk/car/Seat/Leon/BP70EYU", "https://www.cargiant.co.uk/car/Citroen/C1/LA21WYF", "https://www.cargiant.co.uk/car/Renault/Captur/EY20OHN", "https://www.cargiant.co.uk/car/Vauxhall/Crossland-X/NRZ9125", "https://www.cargiant.co.uk/car/KIA/Sportage/YF19FSB", "https://www.cargiant.co.uk/car/Seat/Arona/AJ21EWK", "https://www.cargiant.co.uk/car/Toyota/Corolla/WK20VWW", "https://www.cargiant.co.uk/car/Seat/Arona/MH21RKF", "https://www.cargiant.co.uk/car/KIA/Niro/LM72ATF"]


##### FILE: ./cargiant_scraper_3/spiders/catalogue.py
==================================================
import scrapy
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from scrapy.http import HtmlResponse
import logging
import time

class CargiantSpider(scrapy.Spider):
    name = "catalogue"
    start_urls = ['https://www.cargiant.co.uk/search/all/all']

    def __init__(self, *args, **kwargs):
        super(CargiantSpider, self).__init__(*args, **kwargs)
        chrome_options = Options()
        chrome_options.add_argument('--headless')  # Run in headless mode
        chrome_options.add_argument('--disable-gpu')
        chrome_options.add_argument('--no-sandbox')
        self.driver = webdriver.Chrome(options=chrome_options)
    
    def parse(self, response):
        self.driver.get(response.url)

        for page_num in range(5):  # change number of pages
            self.logger.info(f"Processing page {page_num + 1}")
            
            # Wait for the listings to load
            try:
                WebDriverWait(self.driver, 10).until(
                    EC.presence_of_element_located((By.CSS_SELECTOR, 'div[data-vehicle]'))
                )
            except Exception as e:
                self.logger.error(f"Error loading listings: {e}")
                break

            # Grab the current HTML source
            body = self.driver.page_source
            response_obj = HtmlResponse(
                url=self.driver.current_url,
                body=body,
                encoding='utf-8',
            )

            # Parse car listing links
            listings = response_obj.css('a.car-listing-item__details')
            if not listings:
                self.logger.warning("No listings found!")

            for listing in listings:
                car_url = listing.attrib.get('href')
                if car_url:
                    # Construct the absolute URL
                    full_url = f"https://www.cargiant.co.uk{car_url}"
                    yield {
                        'url': full_url,
                    }
                else:
                    self.logger.warning("No URL found in a listing.")
            
            # Handle pagination by clicking the "Next" button
            try:
                next_button = WebDriverWait(self.driver, 10).until(
                    EC.presence_of_element_located((By.CSS_SELECTOR, 'a.paging__item--next'))
                )
                self.driver.execute_script("arguments[0].click();", next_button)
                time.sleep(2)  # Allow time for the next page to load
            except Exception as e:
                self.logger.error(f"Error clicking next button: {e}")
                break

    def closed(self, reason):
        self.driver.quit()



##### FILE: ./cargiant_scraper_3/spiders/master2.py
==================================================
import scrapy
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from scrapy.http import HtmlResponse
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException
import time
import logging


class MasterSpider(scrapy.Spider):
    name = "master2"
    start_urls = ['https://www.cargiant.co.uk/search/all/all']

    def __init__(self, *args, **kwargs):
        super(MasterSpider, self).__init__(*args, **kwargs)
        chrome_options = Options()
        chrome_options.add_argument('--headless')  # Run in headless mode
        chrome_options.add_argument('--disable-gpu')
        chrome_options.add_argument('--no-sandbox')
        self.driver = webdriver.Chrome(options=chrome_options)

    def parse(self, response):
        self.driver.get(response.url)

        for page_num in range(100):  # Change this number to the desired number of pages
            self.logger.info(f"Processing page {page_num + 1}")

            # Wait for the listings to load
            try:
                WebDriverWait(self.driver, 10).until(
                    EC.presence_of_element_located(
                        (By.CSS_SELECTOR, 'div[data-vehicle]'))
                )
            except Exception as e:
                self.logger.error(f"Error loading listings: {e}")
                break

            # Grab the current HTML source
            body = self.driver.page_source
            response_obj = HtmlResponse(
                url=self.driver.current_url,
                body=body,
                encoding='utf-8',
            )

            # Parse car listing links
            listings = response_obj.css('a.car-listing-item__details')
            if not listings:
                self.logger.warning("No listings found!")

            for listing in listings[:]:
                car_url = listing.attrib.get('href')
                if car_url:
                    # Construct the absolute URL
                    full_url = f"https://www.cargiant.co.uk{car_url}"
                    yield scrapy.Request(url=full_url, callback=self.parse_listing)
                else:
                    self.logger.warning("No URL found in a listing.")

            # Handle pagination by clicking the "Next" button
            try:
                next_button = WebDriverWait(self.driver, 10).until(
                    EC.presence_of_element_located(
                        (By.CSS_SELECTOR, 'a.paging__item--next'))
                )
                self.driver.execute_script(
                    "arguments[0].click();", next_button)
                time.sleep(2)  # Allow time for the next page to load
            except Exception as e:
                self.logger.error(f"Error clicking next button: {e}")
                break

    def parse_listing(self, response):
        self.logger.info(f"Processing next listing ...")
        self.driver.get(response.url)
        time.sleep(0.2)  # Wait for the page to load

        # Initialize dictionary for output
        output = {}
        output["url"] = response.url

        # Extract the title which includes both brand and model
        try:
            title_element = self.driver.find_element(
                By.CSS_SELECTOR, 'h1.title__main.set-h3')
            title = title_element.text.strip()
            title_parts = title.split(None, 1)  # Split into brand and model
            output["brand"] = title_parts[0]
            output["model"] = title_parts[1] if len(title_parts) > 1 else None
        except Exception as e:
            self.logger.error(f"Error extracting title: {e}")
            output["brand"] = None
            output["model"] = None

        # Extract price from top part
        try:
            price_element = self.driver.find_element(
                By.CSS_SELECTOR, 'div.price-block__price')
            price = price_element.text.strip()
            output["Price"] = price.replace('£', '').replace(',', '').strip()
        except Exception as e:
            self.logger.error(f"Error extracting price: {e}")
            output["Price"] = None

        # Collect all items from details section on page
        details = {}
        try:
            items = self.driver.find_elements(
                By.CSS_SELECTOR, 'li.details-panel-item__list__item')
            for item in items:
                spans = item.find_elements(By.CSS_SELECTOR, 'span')
                if len(spans) >= 2:
                    key = spans[0].text.strip()
                    value = spans[1].text.strip()
                    details[key] = value
        except Exception as e:
            self.logger.error(f"Error extracting details: {e}")

        # Extract the required metrics from the details dictionary
        output["Year"] = details.get('Year')
        output["Mileage"] = details.get('Mileage')
        output["Fuel"] = details.get('Fuel Type')
        output["Transmission"] = details.get('Transmission')
        output["Body"] = details.get('Body Type')

        # Click on the Performance tab to extract additional data
        try:
            # Wait until the Performance tab is clickable and click it
            performance_tab = WebDriverWait(self.driver, 10).until(
                EC.element_to_be_clickable(
                    (By.CSS_SELECTOR, 'div.tab-wrap__head__inner__tabs__tab[data-tab="tab1"]'))
            )
            performance_tab.click()
            time.sleep(0.2)  # Wait for the Performance tab to load

            # Extract CC and Engine Power BHP from the Performance tab
            # Locate all rows in the table
            rows = self.driver.find_elements(By.CSS_SELECTOR, 'tbody tr')
            cc = None
            bhp = None

            # Iterate through rows and extract data
            for row in rows:
                try:
                    # Check for presence of key/value elements
                    key_element = row.find_elements(By.CSS_SELECTOR, 'td.key')
                    value_element = row.find_elements(
                        By.CSS_SELECTOR, 'td.value')

                    if key_element and value_element:  # Ensure both elements exist
                        key = key_element[0].text.strip()
                        value = value_element[0].text.strip()

                        # Check for desired keys
                        if key == 'CC':
                            cc = value
                        elif key == 'Engine Power - BHP':
                            bhp = value
                except Exception as e:
                    self.logger.error(f"Error parsing row: {e}")
                    continue

            # Convert CC to litres if available
            if cc:
                try:
                    output["litres"] = str(
                        float(cc.replace(',', '').strip()) / 1000) if cc else None
                except ValueError:
                    output["litres"] = None
            else:
                output["litres"] = None

            # Store BHP
            output["hp"] = bhp if bhp else None

        except Exception as e:
            self.logger.error(f"Error extracting Performance data: {e}")
            output["litres"] = None
            output["hp"] = None

        # Yield the output as an item
        yield output

    def closed(self, reason):
        self.driver.quit()



##### FILE: ./cargiant_scraper_3/spiders/master.py
==================================================
import scrapy
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from scrapy.http import HtmlResponse
import json
import os
import time
import subprocess
import sys

class CargiantSpider(scrapy.Spider):
    name = "master"
    start_urls = ['https://www.cargiant.co.uk/search/all/all']

    def __init__(self, *args, **kwargs):
        super(CargiantSpider, self).__init__(*args, **kwargs)
        chrome_options = Options()
        chrome_options.add_argument('--headless')  # Run in headless mode
        chrome_options.add_argument('--disable-gpu')
        chrome_options.add_argument('--no-sandbox')
        self.driver = webdriver.Chrome(options=chrome_options)
        self.urls_file = "urls.json"
        self.results_file = "results.json"

        # Delete old files if they exist
        if os.path.exists(self.urls_file):
            os.remove(self.urls_file)
        if os.path.exists(self.results_file):
            os.remove(self.results_file)

    def parse(self, response):
        self.driver.get(response.url)

        all_urls = []  # Save all the car listing URLs

        for page_num in range(1):  # Adjust number of pages as needed
            self.logger.info(f"Processing page {page_num + 1}")

            # Wait for the listings to load
            try:
                WebDriverWait(self.driver, 10).until(
                    EC.presence_of_element_located((By.CSS_SELECTOR, 'div[data-vehicle]'))
                )
            except Exception as e:
                self.logger.error(f"Error loading listings: {e}")
                break

            # Grab the current HTML source
            body = self.driver.page_source
            response_obj = HtmlResponse(
                url=self.driver.current_url,
                body=body,
                encoding='utf-8',
            )

            # Parse car listing links
            listings = response_obj.css('a.car-listing-item__details')
            if not listings:
                self.logger.warning("No listings found!")

            for listing in listings:
                car_url = listing.attrib.get('href')
                if car_url:
                    # Construct the absolute URL
                    full_url = f"https://www.cargiant.co.uk{car_url}"
                    all_urls.append(full_url)
                else:
                    self.logger.warning("No URL found in a listing.")

            # Handle pagination by clicking the "Next" button
            try:
                next_button = WebDriverWait(self.driver, 10).until(
                    EC.presence_of_element_located((By.CSS_SELECTOR, 'a.paging__item--next'))
                )
                self.driver.execute_script("arguments[0].click();", next_button)
                time.sleep(2)  # Allow time for the next page to load
            except Exception as e:
                self.logger.error(f"Error clicking next button: {e}")
                break

        # Save all URLS to urls.json
        self.logger.info(f"Found {len(all_urls)} URLs in total.")
        self.save_urls_to_json(all_urls)

        # Call the individual listing spider for each URL
        self.crawl_ind_listing(all_urls)

    def save_urls_to_json(self, urls):
        """Save all collected URLs to a JSON file."""
        try:
            with open(self.urls_file, 'w') as f:
                json.dump(urls, f, indent=2)
            self.logger.info(f"Saved {len(urls)} URLs to {self.urls_file}.")
        except Exception as e:
            self.logger.error(f"Error saving URLs to file: {e}")

    def crawl_ind_listing(self, urls):
        """Run the 'ind_listing' spider once with all URLs."""
        # Write all URLs to a temporary file
        temp_urls_file = 'temp_urls.json'
        with open(temp_urls_file, 'w') as f:
            json.dump(urls, f)

        try:
            # Get the project root directory (where scrapy.cfg is located)
            project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
            self.logger.info(f"Using project root directory: {project_root}")

            # Update PYTHONPATH in the environment variables
            env = os.environ.copy()
            env['PYTHONPATH'] = project_root + os.pathsep + env.get('PYTHONPATH', '')

            # Ensure proper directory context
            os.chdir(project_root)

            # Use sys.executable to ensure the subprocess uses the same Python environment
            subprocess.run(
                [
                    sys.executable, "-m", "scrapy", "crawl", "ind_listing",
                    "-a", f"urls_file={temp_urls_file}",
                    "-o", self.results_file,
                    "-t", "json"
                ],
                check=True,
                env=env  # Pass the updated environment variables
            )
        except subprocess.CalledProcessError as e:
            self.logger.error(f"Error while running ind_listing spider: {e}")

    def closed(self, reason):
        self.driver.quit()



##### FILE: ./cargiant_scraper_3/spiders/ind_listing.py
==================================================
import scrapy
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
import json
import logging
import time

class CargiantSpider(scrapy.Spider):
    name = 'ind_listing'

    def __init__(self, *args, **kwargs):
        super(CargiantSpider, self).__init__(*args, **kwargs)
        chrome_options = Options()
        chrome_options.add_argument('--headless')  # Run in headless mode
        chrome_options.add_argument('--disable-gpu')
        chrome_options.add_argument('--no-sandbox')
        self.driver = webdriver.Chrome(options=chrome_options)

        # Read URLs from the passed file
        urls_file = kwargs.get('urls_file')
        if urls_file:
            self.logger.info(f"Reading URLs from file: {urls_file}")
            with open(urls_file, 'r') as f:
                self.start_urls = json.load(f)
            self.logger.info(f"Loaded {len(self.start_urls)} URLs.")
        else:
            self.logger.error("No URLs file provided!")
            self.start_urls = []

    def start_requests(self):
        # Log that start_requests is invoked
        self.logger.info("Starting to process URLs...")
        for url in self.start_urls:
            self.logger.info(f"Processing URL: {url}")
            yield scrapy.Request(url, self.parse)

    def parse(self, response):
        self.driver.get(response.url)
        time.sleep(1)  # Wait for the page to load

        # Initialize dictionary for output
        output = {"url": response.url}

        # Extract title
        try:
            title_element = self.driver.find_element(By.CSS_SELECTOR, 'h1.title__main.set-h3')
            title = title_element.text.strip()
            title_parts = title.split(None, 1)  # Split into brand and model
            output["brand"] = title_parts[0]
            output["model"] = title_parts[1] if len(title_parts) > 1 else None
        except Exception as e:
            self.logger.error(f"Error extracting title: {e}")
            output["brand"] = None
            output["model"] = None

        # Log the parsed output
        self.logger.info(f"Scraped data: {output}")

        yield output

    def closed(self, reason):
        self.driver.quit()



##### FILE: ./cargiant_scraper_3/spiders/master3.py
==================================================
import scrapy
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from scrapy.http import HtmlResponse
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException
import logging
from scrapy.exceptions import CloseSpider


class MasterSpider(scrapy.Spider):
    name = "master3"
    start_urls = ['https://www.cargiant.co.uk/search/all/all']
    custom_settings = {
        "CONCURRENT_REQUESTS": 16,
        "RETRY_ENABLED": True,
    }

    def __init__(self, *args, **kwargs):
        super(MasterSpider, self).__init__(*args, **kwargs)
        self.collected_urls = []  # Collect all URLs here in phase 1
        # self.logger = logging.getLogger(__name__)

        # Selenium WebDriver setup
        chrome_options = Options()
        chrome_options.add_argument('--headless')  # Run browser in headless mode
        chrome_options.add_argument('--disable-gpu')
        chrome_options.add_argument('--no-sandbox')
        self.driver = webdriver.Chrome(options=chrome_options)

    def parse(self, response):
        """
        Phase 1: Use Selenium to collect all listing URLs from pagination.
        """
        self.logger.info("Starting phase 1: Collecting listing URLs.")
        self.driver.get(response.url)

        while True:
            # Wait for the listings to load
            try:
                WebDriverWait(self.driver, 10).until(
                    EC.presence_of_element_located((By.CSS_SELECTOR, 'div[data-vehicle]'))
                )
                self.logger.info(f"Page loaded: {self.driver.current_url}")
            except TimeoutException:
                self.logger.error("Timeout while waiting for listings. Stopping.")
                break

            # Grab the current HTML and extract listings
            body = self.driver.page_source
            current_response = HtmlResponse(
                url=self.driver.current_url,
                body=body,
                encoding='utf-8',
            )
            listings = current_response.css('a.car-listing-item__details::attr(href)').extract()
            absolute_urls = [f"https://www.cargiant.co.uk{url}" for url in listings]
            self.collected_urls.extend(absolute_urls)
            self.logger.info(f"Collected {len(absolute_urls)} URLs from this page.")

            # Try to navigate to the next page
            try:
                next_button = WebDriverWait(self.driver, 10).until(
                    EC.element_to_be_clickable((By.CSS_SELECTOR, 'a.paging__item--next'))
                )
                self.driver.execute_script("arguments[0].click();", next_button)
            except TimeoutException:
                self.logger.info("No more pages to navigate. Exiting phase 1.")
                break

        # After collecting all URLs, move to phase 2
        if not self.collected_urls:
            self.logger.error("No URLs found during phase 1.")
            raise CloseSpider("No listings to scrape.")

        self.logger.info(f"Collected a total of {len(self.collected_urls)} listing URLs.")
        for url in self.collected_urls:
            yield scrapy.Request(url=url, callback=self.parse_listing)

        # Close the driver after Phase 1
        self.driver.quit()

    def parse_listing(self, response):
        """
        Phase 2: Use Scrapy to parse individual listing pages for details.
        """
        self.logger.info(f"Scraping details from {response.url}")

        output = {}
        output["url"] = response.url

        # Extract the title (brand and model)
        title = response.css('h1.title__main.set-h3::text').get()
        if title:
            title_parts = title.strip().split(None, 1)
            output["brand"] = title_parts[0]
            output["model"] = title_parts[1] if len(title_parts) > 1 else None
        else:
            output["brand"] = None
            output["model"] = None

        # Extract price
        price = response.css('div.price-block__price::text').get()
        output["Price"] = price.replace('£', '').replace(',', '').strip() if price else None

        # Extract details section
        details = {}
        for item in response.css('li.details-panel-item__list__item'):
            key = item.css('span:nth-child(1)::text').get()
            value = item.css('span:nth-child(2)::text').get()
            if key and value:
                details[key.strip()] = value.strip()

        output["Year"] = details.get('Year')
        output["Mileage"] = details.get('Mileage')
        output["Fuel"] = details.get('Fuel Type')
        output["Transmission"] = details.get('Transmission')
        output["Body"] = details.get('Body Type')

        # Extract Performance tab data
        cc = response.xpath("//th[text()='CC']/following-sibling::td/text()").get()
        bhp = response.xpath("//th[text()='Engine Power - BHP']/following-sibling::td/text()").get()

        # Convert CC to litres if available
        if cc:
            try:
                output["litres"] = str(float(cc.replace(',', '').strip()) / 1000) if cc else None
            except ValueError:
                output["litres"] = None
        else:
            output["litres"] = None

        # Store BHP
        output["hp"] = bhp if bhp else None

        yield output



##### FILE: ./cargiant_scraper_3/spiders/__init__.py
==================================================
# This package will contain the spiders of your Scrapy project
#
# Please refer to the documentation for information on how to create and manage
# your spiders.



##### FILE: ./cargiant_scraper_3/middlewares.py
==================================================
import logging
from selenium.webdriver.remote.remote_connection import LOGGER as selenium_logger
from scrapy.http import HtmlResponse
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from scrapy import signals

# Suppress unnecessary Selenium logs
selenium_logger.setLevel(logging.WARNING)

class SeleniumMiddleware:
    def __init__(self):
        chrome_options = Options()
        chrome_options.add_argument("--headless")  # Run in headless mode
        chrome_options.add_argument("--disable-gpu")
        chrome_options.add_argument("--no-sandbox")  # Required for some environments
        chrome_options.add_argument("--disable-dev-shm-usage")  # Overcome limited resource problems
        service = Service(ChromeDriverManager().install())
        self.driver = webdriver.Chrome(service=service, options=chrome_options)

    @classmethod
    def from_crawler(cls, crawler):
        middleware = cls()
        crawler.signals.connect(middleware.spider_closed, signal=signals.spider_closed)
        return middleware

    def process_request(self, request, spider):
        logging.info(f"Processing URL: {request.url}")
        self.driver.get(request.url)

        try:
            # Wait until the target element is present
            WebDriverWait(self.driver, 10).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, "div[data-vehicle]"))
            )
        except Exception as e:
            logging.error(f"Error loading page {request.url}: {e}")
            return HtmlResponse(
                url=self.driver.current_url,
                status=500,
                request=request,
                body=f"Error loading page: {e}".encode('utf-8')
            )

        body = self.driver.page_source
        return HtmlResponse(
            url=self.driver.current_url,
            body=body,
            encoding='utf-8',
            request=request
        )

    def spider_closed(self, spider):
        logging.info("Closing Selenium WebDriver.")
        self.driver.quit()



##### FILE: ./cargiant_scraper_3/settings.py
==================================================
# Scrapy settings for cargiant_scraper_3 project

BOT_NAME = "cargiant_scraper_3"

SPIDER_MODULES = ["cargiant_scraper_3.spiders"]
NEWSPIDER_MODULE = "cargiant_scraper_3.spiders"

# Obey robots.txt rules
ROBOTSTXT_OBEY = False

# Enable or disable downloader middlewares
DOWNLOADER_MIDDLEWARES = {
    # 'cargiant_scraper_3.middlewares.SeleniumMiddleware': 543,
    'scrapy.downloadermiddlewares.httpcompression.HttpCompressionMiddleware': 810,
}

# Enable and configure HTTP caching (disabled by default)
HTTPCACHE_STORAGE = 'scrapy.extensions.httpcache.FilesystemCacheStorage'

# Set settings whose default value is deprecated to a future-proof value
REQUEST_FINGERPRINTER_IMPLEMENTATION = "2.7"
TWISTED_REACTOR = "twisted.internet.asyncioreactor.AsyncioSelectorReactor"
FEED_EXPORT_ENCODING = "utf-8"

LOG_LEVEL = 'INFO'  # Set this to 'ERROR' if you only want to see errors.



##### FILE: ./cargiant_scraper_3/pipelines.py
==================================================
# Define your item pipelines here
#
# Don't forget to add your pipeline to the ITEM_PIPELINES setting
# See: https://docs.scrapy.org/en/latest/topics/item-pipeline.html


# useful for handling different item types with a single interface
from itemadapter import ItemAdapter


class CargiantScraperPipeline:
    def process_item(self, item, spider):
        return item



##### FILE: ./cargiant_scraper_3/items.py
==================================================
# Define here the models for your scraped items
#
# See documentation in:
# https://docs.scrapy.org/en/latest/topics/items.html

import scrapy


class CargiantScraperItem(scrapy.Item):
    # define the fields for your item here like:
    # name = scrapy.Field()
    pass



##### FILE: ./cargiant_scraper_3/__init__.py
==================================================



##### FILE: ./cargiant_scraper_3/runfile.py
==================================================
import os
from scrapy import cmdline

# Ensure we are in the correct directory before running the Scrapy command
# target_dir = './Marij/cargiant_scraper_3'
# current_dir = os.getcwd()

# if current_dir != os.path.abspath(target_dir):
#     os.chdir(target_dir)

# Execute the Scrapy command
cmdline.execute("scrapy crawl master -O cargiant_data.json".split())



##### FILE: ./scrapy.cfg
==================================================
# Automatically created by: scrapy startproject
#
# For more information about the [deploy] section see:
# https://scrapyd.readthedocs.io/en/latest/deploy.html

[settings]
default = cargiant_scraper_3.settings

[deploy]
#url = http://localhost:6800/
project = cargiant_scraper_3



##### FILE: ./urls.json
==================================================
[
  "https://www.cargiant.co.uk/car/Volkswagen/Golf/KR68JFY",
  "https://www.cargiant.co.uk/car/Tesla/Model-X/LG67KKU",
  "https://www.cargiant.co.uk/car/Vauxhall/Astra/WP20CKK",
  "https://www.cargiant.co.uk/car/KIA/Stinger/LF19MVW",
  "https://www.cargiant.co.uk/car/Mini/Countryman/OW19YCZ",
  "https://www.cargiant.co.uk/car/Volkswagen/Golf/PN70KGZ",
  "https://www.cargiant.co.uk/car/Volvo/XC40/FM68EOS",
  "https://www.cargiant.co.uk/car/KIA/Rio/FV18DNO",
  "https://www.cargiant.co.uk/car/Volkswagen/Touareg/BL68AVG",
  "https://www.cargiant.co.uk/car/Seat/Arona/RV69XPB",
  "https://www.cargiant.co.uk/car/Volvo/XC40/LB19EMV",
  "https://www.cargiant.co.uk/car/Land-Rover/Range-Rover-Evoque/AK20EYR",
  "https://www.cargiant.co.uk/car/BMW/X2/DL67YMH",
  "https://www.cargiant.co.uk/car/Mercedes/S-Class/PJ69ZZR",
  "https://www.cargiant.co.uk/car/Volkswagen/Touareg/PL18PHA",
  "https://www.cargiant.co.uk/car/Mercedes/E-Class/PF19TBZ",
  "https://www.cargiant.co.uk/car/Mercedes/A-Class/YF20LKZ",
  "https://www.cargiant.co.uk/car/Ford/Edge/ET19VJJ",
  "https://www.cargiant.co.uk/car/Seat/Leon/BP70EYU",
  "https://www.cargiant.co.uk/car/Citroen/C1/LA21WYF",
  "https://www.cargiant.co.uk/car/Renault/Captur/EY20OHN",
  "https://www.cargiant.co.uk/car/Vauxhall/Crossland-X/NRZ9125",
  "https://www.cargiant.co.uk/car/KIA/Sportage/YF19FSB",
  "https://www.cargiant.co.uk/car/Seat/Arona/AJ21EWK",
  "https://www.cargiant.co.uk/car/Toyota/Corolla/WK20VWW",
  "https://www.cargiant.co.uk/car/Seat/Arona/MH21RKF",
  "https://www.cargiant.co.uk/car/KIA/Niro/LM72ATF"
]


##### FILE: ./cargiant_data.json
==================================================
[
{"url": "https://www.cargiant.co.uk/car/Volkswagen/Golf/KR68JFY", "brand": "Volkswagen", "model": "Golf", "Price": "11499", "Year": "2018", "Mileage": "83,939", "Fuel": "Petrol", "Transmission": "Manual", "Body": "5 Dr Hatch", "litres": "1.498", "hp": "130"},
{"url": "https://www.cargiant.co.uk/car/Mercedes/S-Class/PJ69ZZR", "brand": "Mercedes", "model": "S Class", "Price": "28799", "Year": "2019", "Mileage": "62,233", "Fuel": "Diesel", "Transmission": "Auto", "Body": "Saloon", "litres": "2.925", "hp": "286"},
{"url": "https://www.cargiant.co.uk/car/Renault/Captur/EY20OHN", "brand": "Renault", "model": "Captur", "Price": "14299", "Year": "2020", "Mileage": "2,713", "Fuel": "Petrol", "Transmission": "Auto", "Body": "SUV", "litres": "1.333", "hp": "150"},
{"url": "https://www.cargiant.co.uk/car/Citroen/C1/LA21WYF", "brand": "Citroen", "model": "C1", "Price": "6999", "Year": "2021", "Mileage": "41,286", "Fuel": "Petrol", "Transmission": "Manual", "Body": "5 Dr Hatch", "litres": "0.998", "hp": "72"},
{"url": "https://www.cargiant.co.uk/car/Seat/Leon/BP70EYU", "brand": "Seat", "model": "Leon", "Price": "11999", "Year": "2020", "Mileage": "70,515", "Fuel": "Hybrid", "Transmission": "Auto", "Body": "5 Dr Hatch", "litres": "1.395", "hp": "204"},
{"url": "https://www.cargiant.co.uk/car/Ford/Edge/ET19VJJ", "brand": "Ford", "model": "Edge", "Price": "21499", "Year": "2019", "Mileage": "29,180", "Fuel": "Diesel", "Transmission": "Auto", "Body": "SUV", "litres": "1.997", "hp": "238"},
{"url": "https://www.cargiant.co.uk/car/Mercedes/A-Class/YF20LKZ", "brand": "Mercedes", "model": "A Class", "Price": "15499", "Year": "2020", "Mileage": "69,479", "Fuel": "Petrol", "Transmission": "Auto", "Body": "5 Dr Hatch", "litres": "1.332", "hp": "163"},
{"url": "https://www.cargiant.co.uk/car/Mercedes/E-Class/PF19TBZ", "brand": "Mercedes", "model": "E Class", "Price": "16799", "Year": "2019", "Mileage": "105,636", "Fuel": "Hybrid", "Transmission": "Auto", "Body": "Estate", "litres": "1.95", "hp": "316"},
{"url": "https://www.cargiant.co.uk/car/Volkswagen/Touareg/PL18PHA", "brand": "Volkswagen", "model": "Touareg", "Price": "24299", "Year": "2018", "Mileage": "81,794", "Fuel": "Diesel", "Transmission": "Auto", "Body": "SUV", "litres": "2.967", "hp": "286"},
{"url": "https://www.cargiant.co.uk/car/BMW/X2/DL67YMH", "brand": "BMW", "model": "X2", "Price": "14999", "Year": "2018", "Mileage": "59,916", "Fuel": "Diesel", "Transmission": "Auto", "Body": "SUV", "litres": null, "hp": null},
{"url": "https://www.cargiant.co.uk/car/Land-Rover/Range-Rover-Evoque/AK20EYR", "brand": "Land", "model": "Rover Range Rover Evoque", "Price": "21999", "Year": "2020", "Mileage": "27,948", "Fuel": "Diesel", "Transmission": "Auto", "Body": "SUV", "litres": "1.999", "hp": "150"},
{"url": "https://www.cargiant.co.uk/car/Volvo/XC40/LB19EMV", "brand": "Volvo", "model": "XC40", "Price": "16799", "Year": "2019", "Mileage": "71,939", "Fuel": "Petrol", "Transmission": "Auto", "Body": "SUV", "litres": "1.969", "hp": "190"},
{"url": "https://www.cargiant.co.uk/car/Seat/Arona/RV69XPB", "brand": "Seat", "model": "Arona", "Price": "12499", "Year": "2019", "Mileage": "14,580", "Fuel": "Petrol", "Transmission": "Manual", "Body": "SUV", "litres": "0.999", "hp": "115"},
{"url": "https://www.cargiant.co.uk/car/Volkswagen/Touareg/BL68AVG", "brand": "Volkswagen", "model": "Touareg", "Price": "24599", "Year": "2018", "Mileage": "46,495", "Fuel": "Diesel", "Transmission": "Auto", "Body": "SUV", "litres": "2.967", "hp": "231"},
{"url": "https://www.cargiant.co.uk/car/KIA/Rio/FV18DNO", "brand": "KIA", "model": "Rio", "Price": "10499", "Year": "2018", "Mileage": "22,702", "Fuel": "Petrol", "Transmission": "Manual", "Body": "5 Dr Hatch", "litres": "0.998", "hp": "99"},
{"url": "https://www.cargiant.co.uk/car/Volvo/XC40/FM68EOS", "brand": "Volvo", "model": "XC40", "Price": "16999", "Year": "2019", "Mileage": "80,097", "Fuel": "Diesel", "Transmission": "Auto", "Body": "SUV", "litres": "1.969", "hp": "190"},
{"url": "https://www.cargiant.co.uk/car/Tesla/Model-3/YB20OBM", "brand": "Tesla", "model": "Model 3", "Price": "20799", "Year": "2020", "Mileage": "54,793", "Fuel": "Electric", "Transmission": "Auto", "Body": "Saloon", "litres": "0.001", "hp": "456"},
{"url": "https://www.cargiant.co.uk/car/Vauxhall/Insignia/VN18FXL", "brand": "Vauxhall", "model": "Insignia", "Price": "9899", "Year": "2018", "Mileage": "60,774", "Fuel": "Petrol", "Transmission": "Manual", "Body": "5 Dr Hatch", "litres": "1.49", "hp": "165"},
{"url": "https://www.cargiant.co.uk/car/Lexus/UX/FG21OKT", "brand": "Lexus", "model": "UX", "Price": "15499", "Year": "2021", "Mileage": "93,786", "Fuel": "Hybrid", "Transmission": "Auto", "Body": "SUV", "litres": "1.987", "hp": "184"},
{"url": "https://www.cargiant.co.uk/car/Renault/Kadjar/YT19KGJ", "brand": "Renault", "model": "Kadjar", "Price": "10699", "Year": "2019", "Mileage": "40,953", "Fuel": "Petrol", "Transmission": "Manual", "Body": "SUV", "litres": "1.333", "hp": "140"},
{"url": "https://www.cargiant.co.uk/car/BMW/2-Series/SM19LFU", "brand": "BMW", "model": "2 Series", "Price": "12999", "Year": "2019", "Mileage": "45,488", "Fuel": "Petrol", "Transmission": "Manual", "Body": "Cabriolet / Convertible", "litres": "1.499", "hp": "136"},
{"url": "https://www.cargiant.co.uk/car/Ford/Fiesta/VN69OUO", "brand": "Ford", "model": "Fiesta", "Price": "10599", "Year": "2019", "Mileage": "19,470", "Fuel": "Petrol", "Transmission": "Manual", "Body": "5 Dr Hatch", "litres": "1.084", "hp": "85"},
{"url": "https://www.cargiant.co.uk/car/Volkswagen/Tiguan/FT21ZKU", "brand": "Volkswagen", "model": "Tiguan", "Price": "21599", "Year": "2021", "Mileage": "46,590", "Fuel": "Petrol", "Transmission": "Auto", "Body": "SUV", "litres": "1.498", "hp": "150"},
{"url": "https://www.cargiant.co.uk/car/Seat/Leon/LS68UAT", "brand": "Seat", "model": "Leon", "Price": "12699", "Year": "2018", "Mileage": "39,611", "Fuel": "Petrol", "Transmission": "Auto", "Body": "5 Dr Hatch", "litres": "1.498", "hp": "150"},
{"url": "https://www.cargiant.co.uk/car/Mercedes/A-Class/GY21LCZ", "brand": "Mercedes", "model": "A Class", "Price": "19199", "Year": "2021", "Mileage": "27,202", "Fuel": "Hybrid", "Transmission": "Auto", "Body": "5 Dr Hatch", "litres": "1.332", "hp": "218"},
{"url": "https://www.cargiant.co.uk/car/Vauxhall/Grandland-X/YF68HNT", "brand": "Vauxhall", "model": "Grandland X", "Price": "8999", "Year": "2018", "Mileage": "47,982", "Fuel": "Diesel", "Transmission": "Manual", "Body": "SUV", "litres": "1.56", "hp": "120"},
{"url": "https://www.cargiant.co.uk/car/Citroen/C5-Aircross/CJ21KFE", "brand": "Citroen", "model": "C5 Aircross", "Price": "16699", "Year": "2021", "Mileage": "30,044", "Fuel": "Petrol", "Transmission": "Auto", "Body": "SUV", "litres": "1.199", "hp": "131"},
{"url": "https://www.cargiant.co.uk/car/Mercedes/GLE/GY70HRL", "brand": "Mercedes", "model": "GLE", "Price": "36499", "Year": "2020", "Mileage": "50,820", "Fuel": "Diesel", "Transmission": "Auto", "Body": "SUV", "litres": "1.95", "hp": "245"},
{"url": "https://www.cargiant.co.uk/car/BMW/X4/YK68XSZ", "brand": "BMW", "model": "X4", "Price": "22699", "Year": "2018", "Mileage": "78,892", "Fuel": "Diesel", "Transmission": "Auto", "Body": "SUV", "litres": "1.995", "hp": "190"},
{"url": "https://www.cargiant.co.uk/car/Vauxhall/Astra/VO68EJX", "brand": "Vauxhall", "model": "Astra", "Price": "8599", "Year": "2018", "Mileage": "54,229", "Fuel": "Petrol", "Transmission": "Manual", "Body": "5 Dr Hatch", "litres": "1.598", "hp": "200"},
{"url": "https://www.cargiant.co.uk/car/Audi/A4/RV71TXU", "brand": "Audi", "model": "A4", "Price": "15899", "Year": "2021", "Mileage": "70,090", "Fuel": "Petrol", "Transmission": "Manual", "Body": "Saloon", "litres": "1.984", "hp": "150"},
{"url": "https://www.cargiant.co.uk/car/Audi/Q5/KW21VYF", "brand": "Audi", "model": "Q5", "Price": "28799", "Year": "2021", "Mileage": "24,501", "Fuel": "Diesel", "Transmission": "Auto", "Body": "SUV", "litres": "1.968", "hp": "204"},
{"url": "https://www.cargiant.co.uk/car/Mercedes/GLB/DV71FRR", "brand": "Mercedes", "model": "GLB", "Price": "26199", "Year": "2021", "Mileage": "41,429", "Fuel": "Diesel", "Transmission": "Auto", "Body": "SUV", "litres": "1.95", "hp": "150"},
{"url": "https://www.cargiant.co.uk/car/Nissan/Leaf/BV20SLZ", "brand": "Nissan", "model": "Leaf", "Price": "12299", "Year": "2020", "Mileage": "32,347", "Fuel": "Electric", "Transmission": "Auto", "Body": "5 Dr Hatch", "litres": "0.001", "hp": "217"},
{"url": "https://www.cargiant.co.uk/car/Polestar/2/OV70ENX", "brand": "Polestar", "model": "2", "Price": "23799", "Year": "2020", "Mileage": "18,545", "Fuel": "Electric", "Transmission": "Auto", "Body": "Saloon", "litres": "0.001", "hp": "408"},
{"url": "https://www.cargiant.co.uk/car/Audi/A5/YS69VPF", "brand": "Audi", "model": "A5", "Price": "17799", "Year": "2019", "Mileage": "72,686", "Fuel": "Diesel", "Transmission": "Auto", "Body": "5 Dr Hatch", "litres": "1.968", "hp": "190"},
{"url": "https://www.cargiant.co.uk/car/Tesla/Model-3/WX71VVB", "brand": "Tesla", "model": "Model 3", "Price": "19899", "Year": "2021", "Mileage": "48,404", "Fuel": "Electric", "Transmission": "Auto", "Body": "Saloon", "litres": "0.001", "hp": "245"},
{"url": "https://www.cargiant.co.uk/car/Volkswagen/T-Cross/RY19SWZ", "brand": "Volkswagen", "model": "T-Cross", "Price": "15899", "Year": "2019", "Mileage": "37,011", "Fuel": "Petrol", "Transmission": "Auto", "Body": "SUV", "litres": "0.999", "hp": "115"},
{"url": "https://www.cargiant.co.uk/car/Suzuki/SX4-S-Cross/YP72JYX", "brand": "Suzuki", "model": "SX4 S-Cross", "Price": "17799", "Year": "2022", "Mileage": "11,959", "Fuel": "Hybrid", "Transmission": "Auto", "Body": "SUV", "litres": "1.462", "hp": "115"},
{"url": "https://www.cargiant.co.uk/car/Renault/Captur/SD69DDN", "brand": "Renault", "model": "Captur", "Price": "9699", "Year": "2019", "Mileage": "54,828", "Fuel": "Petrol", "Transmission": "Manual", "Body": "SUV", "litres": "1.333", "hp": "130"},
{"url": "https://www.cargiant.co.uk/car/Mercedes/A-Class/GP68UWN", "brand": "Mercedes", "model": "A Class", "Price": "14399", "Year": "2019", "Mileage": "68,229", "Fuel": "Petrol", "Transmission": "Auto", "Body": "5 Dr Hatch", "litres": "1.991", "hp": "190"},
{"url": "https://www.cargiant.co.uk/car/Mercedes/GLB/WG70WZE", "brand": "Mercedes", "model": "GLB", "Price": "29699", "Year": "2021", "Mileage": "16,358", "Fuel": "Diesel", "Transmission": "Auto", "Body": "SUV", "litres": "1.95", "hp": "190"},
{"url": "https://www.cargiant.co.uk/car/Toyota/Rav-4/FX70XVR", "brand": "Toyota", "model": "Rav 4", "Price": "18499", "Year": "2020", "Mileage": "89,483", "Fuel": "Hybrid", "Transmission": "Auto", "Body": "SUV", "litres": "2.487", "hp": "218"},
{"url": "https://www.cargiant.co.uk/car/Volkswagen/Tiguan/CK21JYT", "brand": "Volkswagen", "model": "Tiguan", "Price": "20199", "Year": "2021", "Mileage": "70,716", "Fuel": "Petrol", "Transmission": "Auto", "Body": "SUV", "litres": "1.498", "hp": "150"},
{"url": "https://www.cargiant.co.uk/car/DS/3-Crossback/CF21LNJ", "brand": "DS", "model": "3 Crossback", "Price": "12499", "Year": "2021", "Mileage": "42,474", "Fuel": "Petrol", "Transmission": "Auto", "Body": "SUV", "litres": "1.199", "hp": "131"},
{"url": "https://www.cargiant.co.uk/car/BMW/2-Series/ML20VJP", "brand": "BMW", "model": "2 Series", "Price": "14599", "Year": "2020", "Mileage": "57,152", "Fuel": "Petrol", "Transmission": "Auto", "Body": "Coupe", "litres": "1.499", "hp": "136"},
{"url": "https://www.cargiant.co.uk/car/Skoda/Kamiq/AE70XCT", "brand": "Skoda", "model": "Kamiq", "Price": "12299", "Year": "2020", "Mileage": "46,912", "Fuel": "Petrol", "Transmission": "Manual", "Body": "SUV", "litres": "0.999", "hp": "116"},
{"url": "https://www.cargiant.co.uk/car/Vauxhall/Insignia/BV18WVD", "brand": "Vauxhall", "model": "Insignia", "Price": "8999", "Year": "2018", "Mileage": "54,646", "Fuel": "Petrol", "Transmission": "Manual", "Body": "5 Dr Hatch", "litres": "1.49", "hp": "165"},
{"url": "https://www.cargiant.co.uk/car/Toyota/Corolla/GU70EWP", "brand": "Toyota", "model": "Corolla", "Price": "15499", "Year": "2020", "Mileage": "57,603", "Fuel": "Hybrid", "Transmission": "Auto", "Body": "Estate", "litres": "1.798", "hp": "122"},
{"url": "https://www.cargiant.co.uk/car/Mercedes/A-Class/GN21UKW", "brand": "Mercedes", "model": "A Class", "Price": "18299", "Year": "2021", "Mileage": "13,001", "Fuel": "Petrol", "Transmission": "Auto", "Body": "5 Dr Hatch", "litres": "1.332", "hp": "136"},
{"url": "https://www.cargiant.co.uk/car/Volvo/V40/SF19TNC", "brand": "Volvo", "model": "V40", "Price": "13899", "Year": "2019", "Mileage": "40,732", "Fuel": "Petrol", "Transmission": "Auto", "Body": "5 Dr Hatch", "litres": "1.498", "hp": "152"},
{"url": "https://www.cargiant.co.uk/car/BMW/3-Series/YL19NHO", "brand": "BMW", "model": "3 Series", "Price": "19999", "Year": "2019", "Mileage": "53,983", "Fuel": "Petrol", "Transmission": "Auto", "Body": "Saloon", "litres": "1.998", "hp": "258"},
{"url": "https://www.cargiant.co.uk/car/Peugeot/5008/MK70UZY", "brand": "Peugeot", "model": "5008", "Price": "17799", "Year": "2020", "Mileage": "41,749", "Fuel": "Diesel", "Transmission": "Manual", "Body": "SUV", "litres": "1.499", "hp": "131"},
{"url": "https://www.cargiant.co.uk/car/MG/ZS/OU19WSF", "brand": "MG", "model": "ZS", "Price": "9999", "Year": "2019", "Mileage": "34,838", "Fuel": "Petrol", "Transmission": "Manual", "Body": "SUV", "litres": "1.498", "hp": "106"},
{"url": "https://www.cargiant.co.uk/car/Volkswagen/Tiguan/KW20HDA", "brand": "Volkswagen", "model": "Tiguan", "Price": "21699", "Year": "2020", "Mileage": "55,900", "Fuel": "Diesel", "Transmission": "Auto", "Body": "SUV", "litres": "1.968", "hp": "150"},
{"url": "https://www.cargiant.co.uk/car/Vauxhall/Insignia/EX19JVW", "brand": "Vauxhall", "model": "Insignia", "Price": "12699", "Year": "2019", "Mileage": "55,289", "Fuel": "Diesel", "Transmission": "Auto", "Body": "Estate", "litres": "1.956", "hp": "170"},
{"url": "https://www.cargiant.co.uk/car/Mini/Electric/HV71UUP", "brand": "Mini", "model": "Electric", "Price": "13599", "Year": "2021", "Mileage": "7,800", "Fuel": "Electric", "Transmission": "Auto", "Body": "3 Dr Hatch", "litres": "0.001", "hp": "184"},
{"url": "https://www.cargiant.co.uk/car/Land-Rover/Discovery-Sport/BL21HMU", "brand": "Land", "model": "Rover Discovery Sport", "Price": "22499", "Year": "2021", "Mileage": "65,323", "Fuel": "Hybrid", "Transmission": "Auto", "Body": "SUV", "litres": "1.498", "hp": "309"},
{"url": "https://www.cargiant.co.uk/car/Peugeot/3008/YK18CTN", "brand": "Peugeot", "model": "3008", "Price": "11599", "Year": "2018", "Mileage": "55,740", "Fuel": "Petrol", "Transmission": "Manual", "Body": "SUV", "litres": "1.199", "hp": "131"},
{"url": "https://www.cargiant.co.uk/car/Peugeot/5008/MW68PUX", "brand": "Peugeot", "model": "5008", "Price": "13699", "Year": "2019", "Mileage": "70,537", "Fuel": "Diesel", "Transmission": "Manual", "Body": "SUV", "litres": "1.499", "hp": "131"},
{"url": "https://www.cargiant.co.uk/car/Mini/Hatch/YP68UTY", "brand": "Mini", "model": "Hatch", "Price": "12999", "Year": "2018", "Mileage": "32,725", "Fuel": "Petrol", "Transmission": "Manual", "Body": "5 Dr Hatch", "litres": "1.998", "hp": "192"},
{"url": "https://www.cargiant.co.uk/car/Volkswagen/Polo/WT21EUB", "brand": "Volkswagen", "model": "Polo", "Price": "14999", "Year": "2021", "Mileage": "42,227", "Fuel": "Petrol", "Transmission": "Auto", "Body": "5 Dr Hatch", "litres": "1.984", "hp": "207"},
{"url": "https://www.cargiant.co.uk/car/Toyota/Corolla/EO71BZB", "brand": "Toyota", "model": "Corolla", "Price": "14499", "Year": "2021", "Mileage": "37,253", "Fuel": "Hybrid", "Transmission": "Auto", "Body": "5 Dr Hatch", "litres": "1.798", "hp": "122"},
{"url": "https://www.cargiant.co.uk/car/Audi/Q3/DG70YFM", "brand": "Audi", "model": "Q3", "Price": "18999", "Year": "2020", "Mileage": "63,081", "Fuel": "Petrol", "Transmission": "Manual", "Body": "SUV", "litres": "1.498", "hp": "150"},
{"url": "https://www.cargiant.co.uk/car/Mercedes/A-Class/YH68RTS", "brand": "Mercedes", "model": "A Class", "Price": "12999", "Year": "2019", "Mileage": "91,133", "Fuel": "Diesel", "Transmission": "Auto", "Body": "5 Dr Hatch", "litres": "1.461", "hp": "116"},
{"url": "https://www.cargiant.co.uk/car/Mercedes/A-Class/BL19ZLK", "brand": "Mercedes", "model": "A Class", "Price": "15699", "Year": "2019", "Mileage": "54,698", "Fuel": "Petrol", "Transmission": "Auto", "Body": "5 Dr Hatch", "litres": "1.332", "hp": "163"},
{"url": "https://www.cargiant.co.uk/car/Volkswagen/Polo/MW21RBX", "brand": "Volkswagen", "model": "Polo", "Price": "15599", "Year": "2021", "Mileage": "28,474", "Fuel": "Petrol", "Transmission": "Auto", "Body": "5 Dr Hatch", "litres": "1.984", "hp": "207"},
{"url": "https://www.cargiant.co.uk/car/Volkswagen/Golf/DV19VGD", "brand": "Volkswagen", "model": "Golf", "Price": "15199", "Year": "2019", "Mileage": "78,895", "Fuel": "Diesel", "Transmission": "Auto", "Body": "5 Dr Hatch", "litres": "1.968", "hp": "184"},
{"url": "https://www.cargiant.co.uk/car/Skoda/Fabia/FG19WTY", "brand": "Skoda", "model": "Fabia", "Price": "10699", "Year": "2019", "Mileage": "45,283", "Fuel": "Petrol", "Transmission": "Manual", "Body": "5 Dr Hatch", "litres": "0.999", "hp": "110"},
{"url": "https://www.cargiant.co.uk/car/Ford/Transit/YM22YSJ", "brand": "Ford", "model": "Transit", "Price": "12999", "Year": "2022", "Mileage": "65,788", "Fuel": "Diesel", "Transmission": "Manual", "Body": "Van", "litres": "1.742", "hp": "200"},
{"url": "https://www.cargiant.co.uk/car/Nissan/Leaf/EY23OSL", "brand": "Nissan", "model": "Leaf", "Price": "12199", "Year": "2023", "Mileage": "34,788", "Fuel": "Electric", "Transmission": "Auto", "Body": "5 Dr Hatch", "litres": "0.001", "hp": "150"},
{"url": "https://www.cargiant.co.uk/car/Audi/Q5/HF70UST", "brand": "Audi", "model": "Q5", "Price": "23999", "Year": "2020", "Mileage": "72,544", "Fuel": "Hybrid", "Transmission": "Auto", "Body": "SUV", "litres": "1.984", "hp": "299"},
{"url": "https://www.cargiant.co.uk/car/Ford/Transit/YM22YRA", "brand": "Ford", "model": "Transit", "Price": "12799", "Year": "2022", "Mileage": "68,599", "Fuel": "Diesel", "Transmission": "Manual", "Body": "Van", "litres": "1.742", "hp": "200"},
{"url": "https://www.cargiant.co.uk/car/Mercedes/E220/VX18YYA", "brand": "Mercedes", "model": "E220", "Price": "18199", "Year": "2018", "Mileage": "54,396", "Fuel": "Diesel", "Transmission": "Auto", "Body": "Coupe", "litres": "1.95", "hp": "194"},
{"url": "https://www.cargiant.co.uk/car/Mitsubishi/Outlander/DV70EYX", "brand": "Mitsubishi", "model": "Outlander", "Price": "13699", "Year": "2020", "Mileage": "78,251", "Fuel": "Hybrid", "Transmission": "Auto", "Body": "SUV", "litres": "2.36", "hp": "224"},
{"url": "https://www.cargiant.co.uk/car/Fiat/Tipo/YC71CMU", "brand": "Fiat", "model": "Tipo", "Price": "8999", "Year": "2021", "Mileage": "39,410", "Fuel": "Petrol", "Transmission": "Manual", "Body": "5 Dr Hatch", "litres": "0.999", "hp": "100"},
{"url": "https://www.cargiant.co.uk/car/Tesla/Model-Y/WN22MTO", "brand": "Tesla", "model": "Model Y", "Price": "28299", "Year": "2022", "Mileage": "56,899", "Fuel": "Electric", "Transmission": "Auto", "Body": "SUV", "litres": "0.001", "hp": "384"},
{"url": "https://www.cargiant.co.uk/car/Volkswagen/Polo/HD21FSE", "brand": "Volkswagen", "model": "Polo", "Price": "13299", "Year": "2021", "Mileage": "28,047", "Fuel": "Petrol", "Transmission": "Manual", "Body": "5 Dr Hatch", "litres": "0.999", "hp": "95"},
{"url": "https://www.cargiant.co.uk/car/Audi/A5/YX68XDG", "brand": "Audi", "model": "A5", "Price": "14999", "Year": "2018", "Mileage": "49,278", "Fuel": "Petrol", "Transmission": "Auto", "Body": "Coupe", "litres": "1.395", "hp": "150"},
{"url": "https://www.cargiant.co.uk/car/Hyundai/Tucson/YT68FND", "brand": "Hyundai", "model": "Tucson", "Price": "16499", "Year": "2018", "Mileage": "12,816", "Fuel": "Petrol", "Transmission": "Auto", "Body": "SUV", "litres": "1.591", "hp": "177"},
{"url": "https://www.cargiant.co.uk/car/Lexus/UX/YX69TBY", "brand": "Lexus", "model": "UX", "Price": "15299", "Year": "2019", "Mileage": "72,263", "Fuel": "Hybrid", "Transmission": "Auto", "Body": "SUV", "litres": null, "hp": null},
{"url": "https://www.cargiant.co.uk/car/BMW/X1/BG20XHR", "brand": "BMW", "model": "X1", "Price": "18799", "Year": "2020", "Mileage": "50,132", "Fuel": "Petrol", "Transmission": "Auto", "Body": "SUV", "litres": "1.499", "hp": "140"},
{"url": "https://www.cargiant.co.uk/car/Mercedes/A-Class/SN69RMV", "brand": "Mercedes", "model": "A Class", "Price": "14499", "Year": "2019", "Mileage": "63,693", "Fuel": "Petrol", "Transmission": "Manual", "Body": "Saloon", "litres": "1.332", "hp": "163"},
{"url": "https://www.cargiant.co.uk/car/Suzuki/Swace/KP21CDO", "brand": "Suzuki", "model": "Swace", "Price": "14199", "Year": "2021", "Mileage": "44,050", "Fuel": "Hybrid", "Transmission": "Auto", "Body": "Estate", "litres": "1.798", "hp": "122"},
{"url": "https://www.cargiant.co.uk/car/KIA/Niro/BN70YWU", "brand": "KIA", "model": "Niro", "Price": "16999", "Year": "2020", "Mileage": "39,140", "Fuel": "Hybrid", "Transmission": "Auto", "Body": "SUV", "litres": "1.58", "hp": "139"},
{"url": "https://www.cargiant.co.uk/car/BMW/2-Series-Tourer/NX68LVZ", "brand": "BMW", "model": "2 Series Tourer", "Price": "11899", "Year": "2018", "Mileage": "78,957", "Fuel": "Petrol", "Transmission": "Auto", "Body": "MPV", "litres": "1.998", "hp": "192"},
{"url": "https://www.cargiant.co.uk/car/BMW/X3/LR70LLF", "brand": "BMW", "model": "X3", "Price": "23799", "Year": "2020", "Mileage": "62,941", "Fuel": "Diesel", "Transmission": "Auto", "Body": "SUV", "litres": "1.995", "hp": "190"},
{"url": "https://www.cargiant.co.uk/car/Ford/Focus/YM18FMP", "brand": "Ford", "model": "Focus", "Price": "8499", "Year": "2018", "Mileage": "55,906", "Fuel": "Petrol", "Transmission": "Manual", "Body": "5 Dr Hatch", "litres": "0.999", "hp": "140"},
{"url": "https://www.cargiant.co.uk/car/BMW/X2/ME19JVM", "brand": "BMW", "model": "X2", "Price": "16899", "Year": "2019", "Mileage": "50,492", "Fuel": "Petrol", "Transmission": "Auto", "Body": "SUV", "litres": "1.499", "hp": "140"},
{"url": "https://www.cargiant.co.uk/car/Volkswagen/Polo/GL21UPT", "brand": "Volkswagen", "model": "Polo", "Price": "11599", "Year": "2021", "Mileage": "39,065", "Fuel": "Petrol", "Transmission": "Manual", "Body": "5 Dr Hatch", "litres": "0.999", "hp": "80"},
{"url": "https://www.cargiant.co.uk/car/Honda/Jazz/EN21UCD", "brand": "Honda", "model": "Jazz", "Price": "14999", "Year": "2021", "Mileage": "37,283", "Fuel": "Hybrid", "Transmission": "Auto", "Body": "5 Dr Hatch", "litres": "1.498", "hp": "109"},
{"url": "https://www.cargiant.co.uk/car/Ford/Ecosport/GX72HVJ", "brand": "Ford", "model": "Ecosport", "Price": "13599", "Year": "2022", "Mileage": "16,095", "Fuel": "Petrol", "Transmission": "Manual", "Body": "SUV", "litres": "0.999", "hp": "125"}
]


.
├── cargiant_data.json
├── cargiant_scraper_3
│   ├── __init__.py
│   ├── items.py
│   ├── middlewares.py
│   ├── pipelines.py
│   ├── __pycache__
│   │   ├── __init__.cpython-310.pyc
│   │   ├── __init__.cpython-313.pyc
│   │   ├── middlewares.cpython-310.pyc
│   │   ├── middlewares.cpython-313.pyc
│   │   ├── settings.cpython-310.pyc
│   │   └── settings.cpython-313.pyc
│   ├── runfile.py
│   ├── settings.py
│   └── spiders
│       ├── catalogue.py
│       ├── ind_listing.py
│       ├── __init__.py
│       ├── master2.py
│       ├── master3.py
│       ├── master.py
│       └── __pycache__
│           ├── cargiant_spider.cpython-310.pyc
│           ├── cargiant_spider.cpython-313.pyc
│           ├── cargiant_spider_new.cpython-310.pyc
│           ├── cargiant_spider_new.cpython-313.pyc
│           ├── catalogue.cpython-310.pyc
│           ├── ind_listing.cpython-310.pyc
│           ├── __init__.cpython-310.pyc
│           ├── __init__.cpython-313.pyc
│           ├── master2.cpython-310.pyc
│           ├── master3.cpython-310.pyc
│           └── master.cpython-310.pyc
├── combined_code.txt
├── output.csv
├── scrapy.cfg
├── temp_urls.json
└── urls.json

4 directories, 35 files
